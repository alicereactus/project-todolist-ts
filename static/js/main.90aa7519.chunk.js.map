{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/Login/Login.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","Login","useDispatch","useSelector","state","auth","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","then","res","resultCode","catch","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","errors","FormControlLabel","control","Checkbox","checked","Button","variant","color","Alert","props","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","action","updateTaskAC","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Delete","Todolist","demo","useEffect","thunk","todolist","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","TodolistsList","todolists","removeTaskAC","removeTaskTC","addTaskAC","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","padding","spacing","tl","allTodolistTasks","Paper","App","finally","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yOAgFYA,EAMAC,E,yJA9ENC,E,OAAWC,EAAMC,OAAN,aACbC,QAAS,iDAPI,CACbC,iBAAiB,EACjBC,QAAS,CACL,UAAW,2CASNC,EAAe,WAGpB,OADgBN,EAASO,IAAoB,eAFxCD,EAAe,SAKTE,GAEX,OADgBR,EAASS,KAA2C,aAAc,CAACD,MAAOA,KANrFF,EAAe,SASTI,GAEX,OADgBV,EAASW,OAAT,qBAA4CD,KAVvDJ,EAAe,SAaTI,EAAYF,GAEvB,OADgBR,EAASY,IAAT,qBAAyCF,GAAM,CAACF,MAAOA,KAdlEF,EAAe,SAiBfO,GACL,OAAOb,EAASO,IAAT,qBAA6CM,EAA7C,YAlBFP,EAAe,SAoBbO,EAAoBC,GAC3B,OAAOd,EAASW,OAAT,qBAA4CE,EAA5C,kBAAgEC,KArBlER,EAAe,SAuBbO,EAAoBE,GAC3B,OAAOf,EAASS,KAAT,qBAA6DI,EAA7D,UAAiF,CAACL,MAAOO,KAxB3FT,EAAe,SA0BbO,EAAoBC,EAAgBE,GAC3C,OAAOhB,EAASY,IAAT,qBAAmDC,EAAnD,kBAAuEC,GAAUE,IAYnFC,EAAU,SACbC,GAEF,OADgBlB,EAASS,KAAsC,aAAcS,IAFxED,EAAU,WAOf,OADgBjB,EAASW,OAAwC,eAN5DM,EAAU,WAWhB,OADiBjB,EAASO,IAA8D,a,SAiBnFT,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAMAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KClFL,IAAMoB,EAAuB,SAAID,EAAuBE,GACvDF,EAAKG,SAASC,OACdF,EAASG,EAAcL,EAAKG,SAAS,KAErCD,EAASG,EAAc,wBAE3BH,EAASI,EAAe,YAGfC,EAA2B,SAACC,EAA4BN,GACjEA,EAASG,EAAcG,EAAMC,QAAUD,EAAMC,QAAU,wBACvDP,EAASI,EAAe,YCVtBI,EAAiC,CACnCC,YAAY,GAcHC,EAAkB,SAACC,GAAD,MAC1B,CAACC,KAAM,yBAA0BD,UCjBhCH,EAAiC,CACnCK,OAAQ,OACRP,MAAO,KACPQ,eAAe,GA0BNX,EAAgB,SAACG,GAAD,MAA2B,CAAEM,KAAM,gBAAiBN,UACpEF,EAAiB,SAACS,GAAD,MAAgC,CAAED,KAAM,iBAAkBC,W,+EC1B3EE,EAAQ,WACjB,IAAMf,EAAWgB,cAEXP,EAAaQ,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKV,cAExEW,EAASC,YAAU,CACrBC,SAAU,SAACC,GACP,OAAKA,EAAOC,MAKPD,EAAOE,cAAZ,EACW,CACHA,SAAU,wBANP,CACHD,MAAO,sBAUnBE,cAAe,CACXF,MAAO,GACPC,SAAU,GACVE,YAAY,GAEhBC,SAAU,SAAAL,GFPK,IAACzB,EEQZE,GFRYF,EEQKyB,EFRqB,SAACvB,GAC/CA,EAASI,EAAe,YACxBP,EAAcC,GACT+B,MAAK,SAAAC,GAC0B,IAAxBA,EAAIhC,KAAKiC,YACT/B,EAASU,GAAgB,IACzBV,EAASI,EAAe,eAExBL,EAAqB+B,EAAIhC,KAAME,MAGtCgC,OAAM,SAAC1B,GACJD,EAAyBC,EAAON,YEAxC,OAAIS,EACO,kBAAC,IAAD,CAAUwB,GAAI,MAIlB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,UAC3B,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACX,0BAAMV,SAAUR,EAAOmB,cACnB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,uDAC6B,uBAAGC,KAAM,wCACNC,OAAQ,UADX,SAG7B,sEAGA,yDAEA,8CAIJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,eACIC,MAAM,QACNC,OAAO,UACH3B,EAAO4B,cAAc,WAE5B5B,EAAO6B,OAAOzB,MAAQ,6BAAMJ,EAAO6B,OAAOzB,OAAe,KAC1D,kBAACqB,EAAA,EAAD,eACIjC,KAAK,WACLkC,MAAM,WACNC,OAAO,UACH3B,EAAO4B,cAAc,cAE5B5B,EAAO6B,OAAOxB,SAAW,6BAAML,EAAO6B,OAAOxB,UAAkB,KAChE,kBAACyB,EAAA,EAAD,CACIJ,MAAO,cACPK,QAAS,kBAACC,EAAA,EAAD,iBACDhC,EAAO4B,cAAc,cADpB,CAELK,QAASjC,EAAOG,OAAOI,gBAG/B,kBAAC2B,EAAA,EAAD,CAAQ1C,KAAM,SAAU2C,QAAS,YAAaC,MAAO,WAArD,e,kBC1ExB,SAASC,EAAMC,GACX,OAAO,kBAAC,IAAD,eAAUC,UAAW,EAAGJ,QAAQ,UAAaG,IAGjD,SAASE,KAEZ,IAAMtD,EAAQW,aAA6C,SAAAC,GAAK,OAAIA,EAAM2C,IAAIvD,SACxEN,EAAWgB,cAEX8C,EAAc,SAACC,EAA8BC,GAChC,cAAXA,GAGJhE,EAASG,EAAc,QAIrB8D,EAAmB,OAAV3D,EAEf,OACI,kBAAC4D,EAAA,EAAD,CAAUC,KAAMF,EAAQG,iBAAkB,IAAMC,QAASP,GACrD,kBAAC,EAAD,CAAOO,QAASP,EAAaQ,SAAS,SACjChE,I,aCxBXE,GAA0C,G,SCG1CA,GAA+B,GA8ExB+D,GAAe,SAAC7E,EAAgB8E,EAAwC/E,GAAzD,OACxB,SAACO,EAAyByE,GACtB,IACMC,EADQD,IACKE,MAAMlF,GAAYmF,MAAK,SAAAC,GAAC,OAAIA,EAAEvF,KAAOI,KACxD,GAAKgF,EAAL,CAMA,IAAMI,EAA6B,aAC/BC,SAAUL,EAAKK,SACfC,YAAaN,EAAKM,YAClBC,SAAUP,EAAKO,SACfC,UAAWR,EAAKQ,UAChB9F,MAAOsF,EAAKtF,MACZyB,OAAQ6D,EAAK7D,QACV2D,GAGPtF,EAAwBO,EAAYC,EAAQoF,GACvCjD,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAIhC,KAAKiC,WAAkB,CAC3B,IAAMoD,EA9DE,SAACzF,EAAgBE,EAAkCH,GAAnD,MACvB,CAACmB,KAAM,cAAehB,QAAOH,aAAYC,UA6DX0F,CAAa1F,EAAQ8E,EAAa/E,GACjDO,EAASmF,QAETpF,EAAqB+B,EAAIhC,KAAME,MAGtCgC,OAAM,SAAC1B,GACJD,EAAyBC,EAAON,WAxBpCqF,QAAQC,KAAK,iC,6BCnFZC,GAAcC,IAAMC,MAAK,SAAS,GAAoD,IAAnDC,EAAkD,EAAlDA,QAAkD,IAAzCC,gBAAyC,SAC9FN,QAAQO,IAAI,sBADkF,MAGtEC,mBAAS,IAH6D,oBAGzFzG,EAHyF,KAGlF0G,EAHkF,OAItED,mBAAwB,MAJ8C,oBAIzFvF,EAJyF,KAIlFyF,EAJkF,KAMxFC,EAAiB,WACE,KAAjB5G,EAAM6G,QACNP,EAAQtG,GACR0G,EAAS,KAETC,EAAS,sBAiBjB,OAAO,6BACH,kBAAClD,EAAA,EAAD,CAAWU,QAAQ,WACRoC,SAAUA,EACVrF,QAASA,EACTK,MAAOvB,EACP8G,SAlBS,SAACC,GACrBL,EAASK,EAAEC,cAAczF,QAkBd0F,WAfW,SAACF,GACT,OAAV7F,GACAyF,EAAS,MAEM,KAAfI,EAAEG,UACFN,KAWOlD,MAAM,QACNyD,WAAYjG,IAEvB,kBAACkG,EAAA,EAAD,CAAYhD,MAAM,UAAUiD,QAAST,EAAgBL,SAAUA,GAC3D,kBAACe,GAAA,EAAD,W,SCxCCC,GAAenB,IAAMC,MAAK,SAAU/B,GAC7C2B,QAAQO,IAAI,uBAD+D,MAE7CC,oBAAS,GAFoC,oBAEtEe,EAFsE,KAE5DC,EAF4D,OAGnDhB,mBAASnC,EAAM/C,OAHoC,oBAGtEvB,EAHsE,KAG/D0G,EAH+D,KAiB3E,OAAOc,EACE,kBAAC/D,EAAA,EAAD,CAAWlC,MAAOvB,EAAO8G,SALd,SAACC,GACjBL,EAASK,EAAEC,cAAczF,QAI4BmG,WAAS,EAACC,OAT1C,WACrBF,GAAY,GACZnD,EAAMwC,SAAS9G,MAQb,0BAAM4H,cAda,WACrBH,GAAY,GACZf,EAASpC,EAAM/C,SAY2B+C,EAAM/C,U,UCd3CsG,GAAOzB,IAAMC,MAAK,SAAC/B,GAC5B,IAAMwD,EAAiBC,uBAAY,kBAAMzD,EAAM0D,WAAW1D,EAAMgB,KAAKpF,GAAIoE,EAAMjE,cAAa,CAACiE,EAAMgB,KAAKpF,GAAIoE,EAAMjE,aAE5G4H,EAAkBF,uBAAY,SAAChB,GACjC,IAAImB,EAAiBnB,EAAEC,cAAc/C,QACrCK,EAAM6D,iBAAiB7D,EAAMgB,KAAKpF,GAAIgI,EAAiB5I,EAAa8I,UAAY9I,EAAa+I,IAAK/D,EAAMjE,cACzG,CAACiE,EAAMgB,KAAKpF,GAAIoE,EAAMjE,aAEnBiI,EAAuBP,uBAAY,SAACQ,GACtCjE,EAAMkE,gBAAgBlE,EAAMgB,KAAKpF,GAAIqI,EAAUjE,EAAMjE,cACtD,CAACiE,EAAMgB,KAAKpF,GAAIoE,EAAMjE,aAEzB,OAAO,yBAAKoI,IAAKnE,EAAMgB,KAAKpF,GAAIwI,UAAWpE,EAAMgB,KAAK7D,SAAWnC,EAAa8I,UAAY,UAAY,IAClG,kBAACpE,EAAA,EAAD,CACIC,QAASK,EAAMgB,KAAK7D,SAAWnC,EAAa8I,UAC5ChE,MAAM,UACN0C,SAAUmB,IAGd,kBAACV,GAAD,CAAchG,MAAO+C,EAAMgB,KAAKtF,MAAO8G,SAAUwB,IACjD,kBAAClB,EAAA,EAAD,CAAYC,QAASS,GACjB,kBAACa,GAAA,EAAD,WCVCC,GAAWxC,IAAMC,MAAK,YAAgD,IAAD,IAApCwC,YAAoC,SAAnBvE,EAAmB,yBAC9E2B,QAAQO,IAAI,mBAEZ,IAAM5F,EAAWgB,cACjBkH,qBAAU,WACN,IAAID,EAAJ,CAGA,IJqBqBxI,EIrBf0I,GJqBe1I,EIrBMiE,EAAM0E,SAAS9I,GJqBE,SAACU,GACjDA,EAASI,EAAe,YACxBlB,EAAsBO,GACjBoC,MAAK,SAACC,GACH,IAAM6C,EAAQ7C,EAAIhC,KAAKuI,MACvBrI,EATc,SAAC2E,EAAwBlF,GAAzB,MACrB,CAACmB,KAAM,YAAa+D,QAAOlF,cAQX6I,CAAW3D,EAAOlF,IAC3BO,EAASI,EAAe,mBI1B5BJ,EAASmI,MACV,IAEH,IAAMI,EAAUpB,uBAAY,SAAC/H,GACzBsE,EAAM6E,QAAQnJ,EAAOsE,EAAM0E,SAAS9I,MACrC,CAACoE,EAAM6E,QAAS7E,EAAM0E,SAAS9I,KAK5BkJ,EAAsBrB,uBAAY,SAAC/H,GACrCsE,EAAM8E,oBAAoB9E,EAAM0E,SAAS9I,GAAIF,KAC9C,CAACsE,EAAM0E,SAAS9I,GAAIoE,EAAM8E,sBAEvBC,EAAoBtB,uBAAY,kBAAMzD,EAAMgF,aAAa,MAAOhF,EAAM0E,SAAS9I,MAAK,CAACoE,EAAM0E,SAAS9I,GAAIoE,EAAMgF,eAC9GC,EAAuBxB,uBAAY,kBAAMzD,EAAMgF,aAAa,SAAUhF,EAAM0E,SAAS9I,MAAK,CAACoE,EAAM0E,SAAS9I,GAAIoE,EAAMgF,eACpHE,EAA0BzB,uBAAY,kBAAMzD,EAAMgF,aAAa,YAAahF,EAAM0E,SAAS9I,MAAK,CAACoE,EAAM0E,SAAS9I,GAAIoE,EAAMgF,eAG5HG,EAAmBnF,EAAMiB,MAS7B,MAP8B,WAA1BjB,EAAM0E,SAASU,SACfD,EAAmBnF,EAAMiB,MAAMmE,QAAO,SAAAjE,GAAC,OAAIA,EAAEhE,SAAWnC,EAAa+I,QAE3C,cAA1B/D,EAAM0E,SAASU,SACfD,EAAmBnF,EAAMiB,MAAMmE,QAAO,SAAAjE,GAAC,OAAIA,EAAEhE,SAAWnC,EAAa8I,cAGlE,6BACH,4BAAI,kBAACb,GAAD,CAAchG,MAAO+C,EAAM0E,SAAShJ,MAAO8G,SAAUsC,IACrD,kBAAChC,EAAA,EAAD,CAAYC,QAvBG,WACnB/C,EAAMqF,eAAerF,EAAM0E,SAAS9I,KAsBKqG,SAA0C,YAAhCjC,EAAM0E,SAASY,cAC1D,kBAACjB,GAAA,EAAD,QAGR,kBAACxC,GAAD,CAAaG,QAAS6C,EAAS5C,SAA0C,YAAhCjC,EAAM0E,SAASY,eACxD,6BAEQH,EAAiBI,KAAI,SAAApE,GAAC,OAAI,kBAACoC,GAAD,CAAMY,IAAKhD,EAAEvF,GAAIoF,KAAMG,EAAGpF,WAAYiE,EAAM0E,SAAS9I,GAC/C8H,WAAY1D,EAAM0D,WAClBQ,gBAAiBlE,EAAMkE,gBACvBL,iBAAkB7D,EAAM6D,uBAIhE,yBAAK2B,MAAO,CAACC,WAAY,SACrB,kBAAC7F,EAAA,EAAD,CAAQC,QAAmC,QAA1BG,EAAM0E,SAASU,OAAmB,WAAa,OACxDrC,QAASgC,EACTjF,MAAO,WAFf,OAKA,kBAACF,EAAA,EAAD,CAAQC,QAAmC,WAA1BG,EAAM0E,SAASU,OAAsB,WAAa,OAC3DrC,QAASkC,EACTnF,MAAO,WAFf,UAIA,kBAACF,EAAA,EAAD,CAAQC,QAAmC,cAA1BG,EAAM0E,SAASU,OAAyB,WAAa,OAC9DrC,QAASmC,EACTpF,MAAO,aAFf,kBChEC4F,GAAqC,SAAC,GAAoB,IAAD,IAAlBnB,YAAkB,SAC5DoB,EAAYpI,aAAyD,SAAAC,GAAK,OAAIA,EAAMmI,aACpF1E,EAAQ1D,aAA8C,SAAAC,GAAK,OAAIA,EAAMyD,SACrElE,EAAaQ,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKV,cAExET,EAAWgB,cAEjBkH,qBAAU,WACN,IAAID,GAASxH,EAAb,CAGA,IAAM0H,ENYH,SAACnI,GACJA,EAASI,EAAe,YACxBlB,IACK2C,MAAK,SAACC,GACH9B,EARmD,CAACY,KAAM,gBAAiByI,UAQnDvH,EAAIhC,OAC5BE,EAASI,EAAe,iBAE3B4B,OAAM,SAAA1B,GACHD,EAAyBC,EAAON,OMnBxCA,EAASmI,MACV,IAEH,IAAMf,EAAaD,uBAAY,SAAU7H,EAAYG,GACjD,IAAM0I,ELuBc,SAACzI,EAAgBD,GAAjB,OAAwC,SAACO,GACjEd,EAAwBO,EAAYC,GAC/BmC,MAAK,SAAAC,GACF,IAAMqD,EAtBU,SAACzF,EAAgBD,GAAjB,MACvB,CAACmB,KAAM,cAAelB,SAAQD,cAqBR6J,CAAa5J,EAAQD,GACpCO,EAASmF,OK3BCoE,CAAajK,EAAIG,GAC/BO,EAASmI,KACV,IAEGI,EAAUpB,uBAAY,SAAU/H,EAAeK,GACjD,IAAM0I,ELyBW,SAAC/I,EAAeK,GAAhB,OAAuC,SAACO,GAC7DA,EAASI,EAAe,YACxBlB,EAAwBO,EAAYL,GAC/ByC,MAAK,SAAAC,GACF,GAA4B,IAAxBA,EAAIhC,KAAKiC,WAAkB,CAC3B,IACMoD,EA9BG,SAACT,GAAD,MACpB,CAAC9D,KAAM,WAAY8D,QA6BO8E,CADF1H,EAAIhC,KAAKA,KAAKuC,MAE3BrC,EAASmF,GACTnF,EAASI,EAAe,mBAExBL,EAAqB+B,EAAIhC,KAAME,MAGtCgC,OAAM,SAAC1B,GACJD,EAAyBC,EAAON,OKvCtByJ,CAAUrK,EAAOK,GAC/BO,EAASmI,KACV,IAEGuB,EAAevC,uBAAY,SAAU7H,EAAYuB,EAAsBpB,GACzE,IAAM0I,EAAQ5D,GAAajF,EAAI,CAACuB,UAASpB,GACzCO,EAASmI,KACV,IAEGP,EAAkBT,uBAAY,SAAU7H,EAAYqK,EAAkBlK,GACxE,IAAM0I,EAAQ5D,GAAajF,EAAI,CAACF,MAAOuK,GAAWlK,GAClDO,EAASmI,KACV,IAEGO,EAAevB,uBAAY,SAAUxG,EAAyBlB,GAChE,IAAM0F,ENxBmE,CAC7EvE,KAAM,yBACNtB,GMsB0CG,ENrB1CqJ,OMqBsDnI,GAClDX,EAASmF,KACV,IAEG4D,EAAiB5B,uBAAY,SAAU7H,GACzC,INNyBG,EMMnB0I,GNNmB1I,EMMMH,ENL5B,SAACU,GAEJA,EAASI,EAAe,YAExBJ,EAvBgF,CACpFY,KAAM,gCAAiCtB,GAsBGG,EAtBCoB,OAsBW,YAClD3B,EAA4BO,GACvBoC,MAAK,SAACC,GACH9B,EAtCgB,SAACV,GAAD,MAAiB,CAACsB,KAAM,kBAAmBtB,MAsClDsK,CAAiBnK,IAE1BO,EAASI,EAAe,mBMHhCJ,EAASmI,KACV,IAEGK,EAAsBrB,uBAAY,SAAU7H,EAAYF,GAC1D,IAAM+I,ENauB,SAAC7I,EAAYF,GAC9C,OAAO,SAACY,GACJd,EAA4BI,EAAIF,GAC3ByC,MAAK,SAACC,GACH9B,EAxDqB,SAACV,EAAYF,GAAb,MAAgC,CACjEwB,KAAM,wBACNtB,KACAF,SAqDqByK,CAAsBvK,EAAIF,QMjB7B0K,CAAsBxK,EAAIF,GACxCY,EAASmI,KACV,IAEG4B,EAAc5C,uBAAY,SAAC/H,GAC7B,IAAM+I,ENFe,SAAC/I,GAC1B,OAAO,SAACY,GACJA,EAASI,EAAe,YACxBlB,EAA4BE,GACvByC,MAAK,SAACC,GACH9B,EAhD0C,CAACY,KAAM,eAAgBwH,SAgD1CtG,EAAIhC,KAAKA,KAAKuC,OACrCrC,EAASI,EAAe,kBMJlB4J,CAAc5K,GAC5BY,EAASmI,KACV,CAACnI,IAEJ,OAAKS,EAIE,oCACH,kBAACyB,EAAA,EAAD,CAAMC,WAAS,EAAC+G,MAAO,CAACe,QAAS,SAC7B,kBAAC1E,GAAD,CAAaG,QAASqE,KAE1B,kBAAC7H,EAAA,EAAD,CAAMC,WAAS,EAAC+H,QAAS,GAEjBb,EAAUJ,KAAI,SAAAkB,GACV,IAAIC,EAAmBzF,EAAMwF,EAAG7K,IAEhC,OAAO,kBAAC4C,EAAA,EAAD,CAAMG,MAAI,EAACwF,IAAKsC,EAAG7K,IACtB,kBAAC+K,GAAA,EAAD,CAAOnB,MAAO,CAACe,QAAS,SACpB,kBAACjC,GAAD,CACII,SAAU+B,EACVxF,MAAOyF,EACPhD,WAAYA,EACZsB,aAAcA,EACdH,QAASA,EACThB,iBAAkBmC,EAClBX,eAAgBA,EAChBnB,gBAAiBA,EACjBY,oBAAqBA,EACrBP,KAAMA,WAxBvB,kBAAC,IAAD,CAAUhG,GAAI,YCLdqI,OAhDf,YAA2C,IAAD,IAA3BrC,YAA2B,SAChCpH,EAASI,aAAiD,SAACC,GAAD,OAAWA,EAAM2C,IAAIhD,UAC/EC,EAAgBG,aAAuC,SAACC,GAAD,OAAWA,EAAM2C,IAAI/C,iBAC5EL,EAAaQ,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKV,cACxET,EAAWgB,cAEjBkH,qBAAU,WACNlI,GVI6B,SAACA,GAClCH,IAAagC,MAAK,SAAAC,GACc,IAAxBA,EAAIhC,KAAKiC,YACT/B,EAASU,GAAgB,OAK5B6J,SAAQ,WACLvK,EAX4C,CAAEY,KAAM,wBAAyBD,OAWhD,YUZlC,IAEH,IAAM6J,EAAgBrD,uBAAY,WAC9BnH,GXGsB,SAACA,GAC3BA,EAASI,EAAe,YACxBP,IACKgC,MAAK,SAAAC,GAC0B,IAAxBA,EAAIhC,KAAKiC,YACT/B,EAASU,GAAgB,IACzBV,EAASI,EAAe,eAExBL,EAAqB+B,EAAIhC,KAAME,MAGtCgC,OAAM,SAAC1B,GACJD,EAAyBC,EAAON,WWdrC,IAEH,OAAKc,EAQD,yBAAKgH,UAAU,OACX,kBAAClE,GAAD,MACA,kBAAC6G,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,KACI,kBAACnE,EAAA,EAAD,CAAYoE,KAAK,QAAQpH,MAAM,UAAUqH,aAAW,QAChD,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,CAAYxH,QAAQ,MAApB,QAGC9C,GAAc,kBAAC6C,EAAA,EAAD,CAAQE,MAAM,UAAUiD,QAAS+D,GAAjC,YAEP,YAAX3J,GAAwB,kBAACmK,EAAA,EAAD,OAE7B,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,OAAQ,kBAAM,kBAAC,GAAD,CAAepD,KAAMA,OAC3D,kBAAC,IAAD,CAAOmD,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,EAAD,SACrC,kBAAC,IAAD,CAAOD,KAAM,IAAKC,OAAQ,kBAAM,sDAChC,kBAAC,IAAD,CAAUC,KAAM,IAAKrJ,GAAI,YA1B9B,yBACHiH,MAAO,CAAEwB,SAAU,QAASa,IAAK,MAAOC,UAAW,SAAUC,MAAO,SACpE,kBAACC,EAAA,EAAD,Q,kBClCNC,GAAcC,aAAgB,CAChCjH,MPAwB,WAAgF,IAA/EzD,EAA8E,uDAAtDV,GAAc2E,EAAwC,uCACvG,OAAQA,EAAOvE,MACX,IAAK,cACD,OAAO,2BAAIM,GAAX,mBAAmBiE,EAAO1F,WAAayB,EAAMiE,EAAO1F,YAAYqJ,QAAO,SAAAjE,GAAC,OAAIA,EAAEvF,IAAM6F,EAAOzF,YAC/F,IAAK,WACD,OAAO,2BAAIwB,GAAX,mBAAmBiE,EAAOT,KAAKmH,WAA/B,CAA6C1G,EAAOT,MAApD,oBAA6DxD,EAAMiE,EAAOT,KAAKmH,gBACnF,IAAK,cACD,OAAO,2BACA3K,GADP,mBAEKiE,EAAO1F,WAAayB,EAAMiE,EAAO1F,YAC7BwJ,KAAI,SAAApE,GAAC,OAAIA,EAAEvF,KAAO6F,EAAOzF,OAAhB,2BAA6BmF,GAAMM,EAAOvF,OAASiF,OAEzE,IAAK,eACD,OAAO,2BAAI3D,GAAX,mBAAmBiE,EAAOiD,SAAS9I,GAAK,KAC5C,IAAK,kBACD,IAAMwM,EAAS,eAAO5K,GAEtB,cADO4K,EAAU3G,EAAO7F,IACjBwM,EACX,IAAK,gBACD,IAAMA,EAAS,eAAO5K,GAItB,OAHAiE,EAAOkE,UAAU0C,SAAQ,SAAA5B,GACrB2B,EAAU3B,EAAG7K,IAAM,MAEhBwM,EAEX,IAAK,YACD,OAAO,2BAAI5K,GAAX,mBAAmBiE,EAAO1F,WAAa0F,EAAOR,QAClD,QACI,OAAOzD,IO3BfmI,URJ4B,WAAsG,IAArGnI,EAAoG,uDAAjEV,GAAc2E,EAAmD,uCACjI,OAAQA,EAAOvE,MACX,IAAK,kBACD,OAAOM,EAAM4H,QAAO,SAAAqB,GAAE,OAAIA,EAAG7K,IAAM6F,EAAO7F,MAC9C,IAAK,eACD,MAAM,CAAN,2BAAY6F,EAAOiD,UAAnB,IAA6BU,OAAQ,MAAOE,aAAc,UAA1D,oBAAsE9H,IAE1E,IAAK,wBACD,OAAOA,EAAM+H,KAAI,SAAAkB,GAAE,OAAIA,EAAG7K,KAAO6F,EAAO7F,GAAjB,2BAA0B6K,GAA1B,IAA8B/K,MAAO+F,EAAO/F,QAAS+K,KAChF,IAAK,yBACD,OAAOjJ,EAAM+H,KAAI,SAAAkB,GAAE,OAAIA,EAAG7K,KAAO6F,EAAO7F,GAAjB,2BAA0B6K,GAA1B,IAA8BrB,OAAQ3D,EAAO2D,SAAUqB,KAClF,IAAK,gCACD,OAAOjJ,EAAM+H,KAAI,SAAAkB,GAAE,OAAIA,EAAG7K,KAAO6F,EAAO7F,GAAjB,2BAA0B6K,GAA1B,IAA8BnB,aAAc7D,EAAOtE,SAAUsJ,KACxF,IAAK,gBACD,OAAOhF,EAAOkE,UAAUJ,KAAI,SAAAkB,GAAE,kCAASA,GAAT,IAAarB,OAAQ,MAAOE,aAAc,YAC5E,QACI,OAAO9H,IQXf2C,IXFsB,WAAoF,IAAnF3C,EAAkF,uDAAxDV,EAAc2E,EAA0C,uCACzG,OAAQA,EAAOvE,MACX,IAAK,iBACD,OAAO,2BAAKM,GAAZ,IAAmBL,OAAQsE,EAAOtE,SACtC,IAAK,gBACD,OAAO,2BAAKK,GAAZ,IAAmBZ,MAAO6E,EAAO7E,QACrC,IAAK,wBACD,OAAO,2BAAKY,GAAZ,IAAmBJ,cAAeqE,EAAOxE,QAC7C,QACI,OAAO,eAAKO,KWNpBC,KZJuB,WAAoF,IAAnFD,EAAkF,uDAAxDV,EAAc2E,EAA0C,uCAC1G,OAAQA,EAAOvE,MACX,IAAK,yBACD,OAAO,2BAAIM,GAAX,IAAkBT,WAAY0E,EAAOxE,QACzC,QACI,OAAOO,MYEN8K,GAAQC,aAAYN,GAAaO,aAAgBC,OAM9DC,OAAOJ,MAAQA,G,OCVKK,QACW,cAA7BD,OAAOE,SAASC,UAEe,UAA7BH,OAAOE,SAASC,UAEhBH,OAAOE,SAASC,SAASC,MACvB,2DCTNC,IAASpB,OACL,kBAAC,IAAMqB,WAAP,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUV,MAAOA,IACb,kBAAC,GAAD,SAIZW,SAASC,eAAe,SD0HtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlL,MAAK,SAAAmL,GACJA,EAAaC,gBAEdjL,OAAM,SAAA1B,GACL+E,QAAQ/E,MAAMA,EAAMC,c","file":"static/js/main.90aa7519.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9aa516cb-8f4b-45f8-be8d-59445844c51c'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import { Dispatch } from 'redux'\r\nimport { authAPI } from '../api/todolists-api'\r\nimport { setIsLoggedInAC } from '../features/Login/auth-reducer'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error }\r\n        case 'APP/SET-IS-INITIALIED':\r\n            return { ...state, isInitialized: action.value }\r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({ type: 'APP/SET-IS-INITIALIED', value } as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n\r\n        }\r\n    })\r\n        .finally(() => {\r\n            dispatch(setAppInitializedAC(true))\r\n        })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport { Login } from '../features/Login/Login'\r\nimport { logoutTC } from '../features/Login/auth-reducer'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\r\n                    <Route path={'/login'} render={() => <Login />} />\r\n                    <Route path={'*'} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n                    <Redirect from={'*'} to={'/404'} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { authReducer } from '../features/Login/auth-reducer';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './app/App';\r\nimport { store } from './app/store';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}