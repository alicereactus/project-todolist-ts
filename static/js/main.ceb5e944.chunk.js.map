{"version":3,"sources":["api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/Login/Login.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","Login","useDispatch","useSelector","auth","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","then","res","resultCode","catch","to","Grid","container","justify","item","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","errors","type","FormControlLabel","control","Checkbox","checked","Button","variant","color","Alert","props","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","setTodolistsAC","todolists","map","tl","filter","entityStatus","addTodolistAC","unshift","todolist","removeTodolistAC","index","findIndex","splice","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","todolistsReducer","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","updateTaskAC","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","onChange","e","currentTarget","onKeyPress","charCode","helperText","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Delete","Todolist","demo","useEffect","thunk","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","TodolistsList","removeTaskAC","removeTaskTC","addTaskAC","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","padding","spacing","allTodolistTasks","Paper","App","finally","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","todoListId","copyState","forEach","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ceb5e944.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '9aa516cb-8f4b-45f8-be8d-59445844c51c'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({ error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({ error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({ status: 'failed' }))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({ error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({ status: 'failed'}))\r\n}\r\n","import { Dispatch } from 'redux'\r\nimport { setAppStatusAC } from '../../app/app-reducer'\r\nimport { authAPI, LoginParamsType } from '../../api/todolists-api'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const { setIsLoggedInAC } = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({ value: true }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading' }))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({ value: false }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport { Dispatch } from 'redux'\r\nimport { authAPI } from '../api/todolists-api'\r\nimport { setIsLoggedInAC } from '../features/Login/auth-reducer'\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    status: \"idle\",\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {\r\n    setAppStatusAC,\r\n    setAppErrorAC,\r\n    setAppInitializedAC,\r\n} = slice.actions\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({ value: true }));\r\n        } else {\r\n\r\n        }\r\n    })\r\n        .finally(() => {\r\n            dispatch(setAppInitializedAC({ isInitialized: true }))\r\n        })\r\n}\r\n\r\n// export type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\n// export type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={'/'} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({ error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: initialState,\r\n    reducers: {\r\n        setTodolistsAC (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))            \r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex((tl) => tl.id === action.payload.id)\r\n            if(index > -1) {\r\n                state.splice(index, 1)\r\n            }\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex((tl) => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex((tl) => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex((tl) => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.status \r\n        }\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\n// actions\r\nexport const {\r\n    setTodolistsAC,\r\n    addTodolistAC,\r\n    removeTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n} = slice.actions\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({ status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({ todolists: res.data }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC({ status: 'loading' }))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC({ id: todolistId, status: 'loading' }))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({ id: todolistId }))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC({ status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({ status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({ todolist: res.data.data.item }))\r\n                dispatch(setAppStatusAC({ status: 'succeeded' }))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({ id, title }))\r\n            })\r\n    }\r\n}\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\r\nimport { addTodolistAC, removeTodolistAC, setTodolistsAC } from './todolists-reducer'\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: any): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case addTodolistAC.type:\r\n            return {...state, [action.payload.todolist.id]: []}\r\n        case removeTodolistAC.type:\r\n            const copyState = {...state}\r\n            delete copyState[action.payload.id]\r\n            return copyState\r\n        case setTodolistsAC.type: {\r\n            const copyState = {...state}\r\n            action.payload.todolists.forEach((tl: any) => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading'}))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC({ status: 'succeeded'}))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({ status: 'loading'}))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC({ status: 'succeeded'}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Box, Button, FormControl, IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({ id: todolistId, filter: value })\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={'/login'} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport { Menu } from '@material-ui/icons'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from './store'\r\nimport { initializeAppTC, RequestStatusType } from './app-reducer'\r\nimport { Redirect, Route, Switch } from 'react-router-dom'\r\nimport { Login } from '../features/Login/Login'\r\nimport { logoutTC } from '../features/Login/auth-reducer'\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({ demo = false }: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{ position: 'fixed', top: '30%', textAlign: 'center', width: '100%' }}>\r\n            <CircularProgress />\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu />\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo} />} />\r\n                    <Route path={'/login'} render={() => <Login />} />\r\n                    <Route path={'*'} render={() => <Login /> } />\r\n                    <Redirect from={'*'} to={'/login'} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { appReducer } from './app-reducer'\r\nimport { tasksReducer } from '../features/TodolistsList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\r\nimport { authReducer } from '../features/Login/auth-reducer';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport App from './app/App';\r\nimport { store } from './app/store';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}