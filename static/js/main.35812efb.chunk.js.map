{"version":3,"sources":["serviceWorker.ts","state/todolists-reducer.ts","state/task-reducer.ts","AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyDown","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","Todolist","changeTodolistTitle","id","removeTodoList","Delete","addTask","tasks","map","t","className","isDone","Checkbox","checked","newIsDoneValue","changeTaskStatus","newValue","changeTaskTitle","removeTask","Button","filter","changeFilter","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","taskID","todoListID","action","type","removeTaskAC","addTaskAC","newTodoListFilter","changeTodoListFilterActionTypeAC","newTodoListTitle","changeTodoListTitleAC","changeTaskStatusAC","changeTaskTitleAC","removeTodoListAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","v1","spacing","tl","allTodolistTasks","tasksForTodolist","task","item","Paper","TodoList","rootReducer","combineReducers","stateCopy","filteredTasks","newTask","newTasks","find","newTodoList","todoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.35812efb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { v1 } from \"uuid\";\r\n\r\nimport { FilterValuesType, TodoListType } from \"../App\";\r\n\r\nexport type ActionType =\r\n  RemoveTodoListActionType\r\n  | AddTodoListActionType\r\n  | ChangeTodoListFilterActionType\r\n  | ChangeTodoListTitleActionType\r\n\r\nexport type RemoveTodoListActionType = {\r\n  type: 'REMOVE-TODOLIST'\r\n  id: string\r\n}\r\n\r\nexport type AddTodoListActionType = {\r\n  type: 'ADD-TODOLIST'\r\n  title: string\r\n  todoListID: string\r\n}\r\n\r\nexport type ChangeTodoListTitleActionType = {\r\n  type: 'CHANGE-TODOLIST-TITLE'\r\n  id: string\r\n  title: string\r\n}\r\n\r\nexport type ChangeTodoListFilterActionType = {\r\n  type: 'CHANGE-TODOLIST-FILTER'\r\n  id: string\r\n  filter: FilterValuesType\r\n}\r\n\r\nlet initialState: Array<TodoListType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodoListType> = initialState, action: ActionType) => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST':\r\n      return state.filter(tl => tl.id !== action.id);\r\n    case 'ADD-TODOLIST':\r\n      const newTodoList: TodoListType = {\r\n        id: action.todoListID,\r\n        title: action.title,\r\n        filter: 'all'\r\n      }\r\n      return [...state, newTodoList]\r\n    case 'CHANGE-TODOLIST-TITLE': {\r\n      const todoList = state.find(tl => tl.id === action.id)\r\n      if (todoList) {\r\n        todoList.title = action.title\r\n      }\r\n      return [...state]\r\n    }\r\n    case 'CHANGE-TODOLIST-FILTER': {\r\n      const todoList = state.find(tl => tl.id === action.id)\r\n      if (todoList) {\r\n        todoList.filter = action.filter\r\n      }\r\n      return [...state]\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListID: string): RemoveTodoListActionType => ({\r\n  type: 'REMOVE-TODOLIST',\r\n  id: todoListID\r\n})\r\n\r\nexport const addTodoListAC = (newTodoListTitle: string): AddTodoListActionType => ({\r\n  type: 'ADD-TODOLIST',\r\n  title: newTodoListTitle,\r\n  todoListID: v1()\r\n})\r\n\r\nexport const changeTodoListTitleAC = (todoListID: string, newTodoListTitle: string): ChangeTodoListTitleActionType => ({\r\n  type: 'CHANGE-TODOLIST-TITLE',\r\n  id: todoListID,\r\n  title: newTodoListTitle\r\n})\r\n\r\nexport const changeTodoListFilterActionTypeAC = (newTodoListFilter: FilterValuesType, todoListID: string): ChangeTodoListFilterActionType => ({\r\n  type: 'CHANGE-TODOLIST-FILTER',\r\n  id: todoListID,\r\n  filter: newTodoListFilter\r\n})","import { v1 } from \"uuid\";\r\n\r\nimport { TaskStateType, TaskType } from \"../App\";\r\nimport { AddTodoListActionType, RemoveTodoListActionType } from \"./todolists-reducer\";\r\n\r\nexport type ActionType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskID: string\r\n    todoListID: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    todoListID: string\r\n    taskID: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    todoListID: string\r\n    taskID: string\r\n    title: string\r\n}\r\n\r\nlet initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = { ...state };\r\n            const tasks = stateCopy[action.todoListID];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskID)\r\n            stateCopy[action.todoListID] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = { ...state };\r\n            const tasks = stateCopy[action.todoListID];\r\n            const newTask = { id: v1(), title: action.title, isDone: false };\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todoListID] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            const stateCopy = { ...state };\r\n\r\n            let tasks = stateCopy[action.todoListID];\r\n            // найдём нужную таску:\r\n            let task = tasks.find(t => t.id === action.taskID);\r\n            //изменим таску, если она нашлась\r\n            if (task) {\r\n                task.isDone = action.isDone;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            const stateCopy = { ...state };\r\n\r\n            let tasks = stateCopy[action.todoListID];\r\n            // найдём нужную таску:\r\n            let task = tasks.find(t => t.id === action.taskID);\r\n            //изменим таску, если она нашлась\r\n            if (task) {\r\n                task.title = action.title;\r\n            }\r\n            return stateCopy;\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = { ...state };\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = { ...state };\r\n\r\n            stateCopy[action.todoListID] = [];\r\n\r\n            return stateCopy;\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskID: string, todoListID: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskID, todoListID }\r\n}\r\n\r\nexport const addTaskAC = (title: string, todoListID: string): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', title, todoListID }\r\n}\r\n\r\nexport const changeTaskStatusAC = (todoListID: string, taskID: string, isDone: boolean): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', todoListID, taskID, isDone }\r\n}\r\n\r\nexport const changeTaskTitleAC = (todoListID: string, taskID: string, title: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', todoListID, taskID, title }\r\n}","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\n\r\ntype AddItemFormType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormType) {\r\n\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<string | null>('')\r\n\r\n  const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setError('')\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyDownAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    setError(null)\r\n    if (e.key === 'Enter') {\r\n      addItem()\r\n    } else if (e.key === 'Escape') {\r\n      setTitle('')\r\n    }\r\n  }\r\n\r\n  const addItem = () => {\r\n    const trimmedTitle = title.trim()\r\n    if (trimmedTitle !== '') {\r\n      props.addItem(trimmedTitle)\r\n    } else {\r\n      setError('Title is required!')\r\n    }\r\n    setTitle('')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        variant='outlined'\r\n        error={!!error}\r\n        value={title}\r\n        onChange={onTitleChangeHandler}\r\n        onKeyDown={onKeyDownAddItem}\r\n        label='Enter title'\r\n        helperText={error}\r\n      />\r\n      <IconButton\r\n        color='primary'\r\n        onClick={addItem}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddItemForm","import { TextField } from '@material-ui/core';\r\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\n\r\ntype EditableSpanType = {\r\n  title: string\r\n  changeValue: (newValue: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanType) {\r\n\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [title, setTitle] = useState<string>(props.title)\r\n\r\n  const activatedEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deActivatedEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeValue(title)\r\n  }\r\n\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  return (editMode\r\n    ?\r\n    <TextField\r\n      variant='outlined'\r\n      value={title}\r\n      onBlur={deActivatedEditMode}\r\n      onChange={onChangeTitle}\r\n      autoFocus={true}\r\n    />\r\n    : <span\r\n      onDoubleClick={activatedEditMode}>{props.title}</span>\r\n  )\r\n}\r\n\r\nexport default EditableSpan","import React, { ChangeEvent } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { Button } from '@material-ui/core';\r\n\r\nimport { FilterValuesType, TaskStateType, TaskType, TodoListType } from './App';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport { AppRootStateType } from './state/store';\r\n\r\ntype PropsType = {\r\n  id: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  addTask: (title: string, todoListID: string) => void\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n  changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n  removeTodoList: (todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n  changeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nfunction Todolist(props: PropsType) {\r\n// let tt = useSelector<AppRootStateType, TodoListType>(state => state.todolists.filter(t => t.id === props.id)[0])\r\n// let ss = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[props.id])\r\n\r\n  const addTask = (title: string) => {\r\n    props.addTask(title, props.id);\r\n  }\r\n\r\n  const removeTodolist = () => {\r\n    props.removeTodoList(props.id);\r\n  }\r\n  const changeTodolistTitle = (title: string) => {\r\n    props.changeTodolistTitle(props.id, title);\r\n  }\r\n\r\n  const onAllClickHandler = () => props.changeFilter(\"all\", props.id);\r\n  const onActiveClickHandler = () => props.changeFilter(\"active\", props.id);\r\n  const onCompletedClickHandler = () => props.changeFilter(\"completed\", props.id);\r\n\r\n  return <div>\r\n    <h3> <EditableSpan title={props.title} changeValue={changeTodolistTitle} />\r\n      <IconButton onClick={removeTodolist}>\r\n        <Delete />\r\n      </IconButton>\r\n    </h3>\r\n    <AddItemForm addItem={addTask} />\r\n    <div>\r\n      {\r\n        props.tasks.map(t => {\r\n          const onClickHandler = () => props.removeTask(t.id, props.id)\r\n          const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            let newIsDoneValue = e.currentTarget.checked;\r\n            props.changeTaskStatus(t.id, newIsDoneValue, props.id);\r\n          }\r\n          const onTitleChangeHandler = (newValue: string) => {\r\n            props.changeTaskTitle(t.id, newValue, props.id);\r\n          }\r\n\r\n          return <div key={t.id} className={t.isDone ? \"is-done\" : \"\"}>\r\n            <Checkbox\r\n              checked={t.isDone}\r\n              color=\"primary\"\r\n              onChange={onChangeHandler}\r\n            />\r\n\r\n            <EditableSpan title={t.title} changeValue={onTitleChangeHandler} />\r\n            <IconButton onClick={onClickHandler}>\r\n              <Delete />\r\n            </IconButton>\r\n          </div>\r\n        })\r\n      }\r\n    </div>\r\n    <div>\r\n      <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n        onClick={onAllClickHandler}\r\n        color={'default'}\r\n      >All\r\n            </Button>\r\n      <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n        onClick={onActiveClickHandler}\r\n        color={'primary'}>Active\r\n            </Button>\r\n      <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n        onClick={onCompletedClickHandler}\r\n        color={'secondary'}>Completed\r\n            </Button>\r\n    </div>\r\n  </div>\r\n}\r\n\r\nexport default Todolist;","import React from 'react';\r\n\r\nimport {useSelector, useDispatch} from 'react-redux'\r\n\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\n\r\n\r\nimport { addTodoListAC, changeTodoListFilterActionTypeAC, changeTodoListTitleAC, removeTodoListAC } from './state/todolists-reducer';\r\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from './state/task-reducer';\r\nimport { AppRootStateType } from './state/store';\r\n\r\nimport TodoList from './TodoList';\r\nimport AddItemForm from './AddItemForm';\r\n\r\nimport './App.css';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\nexport type TaskStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n  const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  // CRUD\r\n  // -Create\r\n  // -Update\r\n  // -Read\r\n  // -Delete\r\n\r\n  function removeTask(taskID: string, todoListID: string) {\r\n    const action = removeTaskAC(taskID, todoListID)\r\n    dispatch(action)\r\n  }\r\n\r\n  function addTask(title: string, todoListID: string) {\r\n    const action = addTaskAC(title, todoListID)\r\n    dispatch(action)\r\n  }\r\n\r\n  function changeFilter(filter: FilterValuesType, todoListID: string) {\r\n    const action = changeTodoListFilterActionTypeAC(filter, todoListID)\r\n    dispatch(action)\r\n  }\r\n\r\n  function changeTodolistTitle(title: string, todoListID: string) {\r\n    const action = changeTodoListTitleAC(todoListID, title)\r\n    dispatch(action)\r\n  }\r\n\r\n  function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n    const action = changeTaskStatusAC(taskID, todoListID, isDone)\r\n    dispatch(action)\r\n  }\r\n\r\n  function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n    const action = changeTaskTitleAC(taskID, title, todoListID)\r\n    dispatch(action)\r\n  }\r\n\r\n  function removeTodoList(todoListID: string) {\r\n    const action = removeTodoListAC(todoListID)\r\n    dispatch(action)\r\n  }\r\n\r\n  function addTodolistItem(title: string) {\r\n    const action = addTodoListAC(title)\r\n    dispatch(action)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n                    </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Container fixed>\r\n        <Grid container style={{ padding: '20px' }}>\r\n          <AddItemForm addItem={addTodolistItem} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          {\r\n            todoLists.map(tl => {\r\n              let allTodolistTasks = tasks[tl.id];\r\n              let tasksForTodolist = allTodolistTasks;\r\n              // let tasksForTodoList = tasks[tl.id]\r\n              if (tl.filter === 'active') {\r\n                tasksForTodolist = allTodolistTasks.filter(task => task.isDone === false)\r\n              }\r\n              if (tl.filter === 'completed') {\r\n                tasksForTodolist = allTodolistTasks.filter(task => task.isDone === true)\r\n              }\r\n\r\n              debugger\r\n              return (\r\n                <Grid item>\r\n                  <Paper style={{ padding: '10px' }}>\r\n                    <TodoList\r\n                      key={tl.id}\r\n                      id={tl.id}\r\n                      title={tl.title}\r\n                      tasks={tasksForTodolist}\r\n                      filter={tl.filter}\r\n                      addTask={addTask}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      changeTaskStatus={changeTaskStatus}\r\n                      removeTodoList={removeTodoList}\r\n                      changeTaskTitle={changeTaskTitle}\r\n                      changeTodolistTitle={changeTodolistTitle} />\r\n                  </Paper>\r\n                </Grid>\r\n              )\r\n            }\r\n            )\r\n          }\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppWithRedux;","import {tasksReducer} from './task-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n   tasks: tasksReducer,\r\n   todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport AppWithReducers from './App';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}