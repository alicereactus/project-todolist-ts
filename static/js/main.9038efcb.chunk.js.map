{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyDown","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","TodoList","tasks","map","task","id","className","isDone","Checkbox","changeTaskStatus","checked","newValue","changeTaskTitle","removeTask","Delete","changeTodolistTitle","removeTodoList","addTask","Button","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskID","todoListID","todoListTasks","newTask","newFilterValue","todoList","find","tl","filteredTodoLists","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","newTodoListID","newTodoList","spacing","tasksForTodoList","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.9038efcb.chunk.js","sourcesContent":["import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\n\r\ntype AddItemFormType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nfunction AddItemForm(props: AddItemFormType) {\r\n\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<string | null>('')\r\n\r\n  const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setError('')\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyDownAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    setError(null)\r\n    if (e.key === 'Enter') {\r\n      addItem()\r\n    } else if (e.key === 'Escape') {\r\n      setTitle('')\r\n    }\r\n  }\r\n\r\n  const addItem = () => {\r\n    const trimmedTitle = title.trim()\r\n    if (trimmedTitle !== '') {\r\n      props.addItem(trimmedTitle)\r\n    } else {\r\n      setError('Title is required!')\r\n    }\r\n    setTitle('')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        variant='outlined'\r\n        error={!!error}\r\n        value={title}\r\n        onChange={onTitleChangeHandler}\r\n        onKeyDown={onKeyDownAddItem}\r\n        label='Enter title'\r\n        helperText={error}\r\n      />\r\n      <IconButton\r\n        color='primary'\r\n        onClick={addItem}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddItemForm","import { TextField } from '@material-ui/core';\r\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\n\r\ntype EditableSpanType = {\r\n  title: string\r\n  changeValue: (newValue: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanType) {\r\n\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [title, setTitle] = useState<string>(props.title)\r\n\r\n  const activatedEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deActivatedEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeValue(title)\r\n  }\r\n\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  return (editMode\r\n    ?\r\n    <TextField\r\n      variant='outlined'\r\n      value={title}\r\n      onBlur={deActivatedEditMode}\r\n      onChange={onChangeTitle}\r\n      autoFocus={true}\r\n    />\r\n    : <span\r\n      onDoubleClick={activatedEditMode}>{props.title}</span>\r\n  )\r\n}\r\n\r\nexport default EditableSpan","import React, { ChangeEvent } from 'react';\r\nimport { FilterValuesType, TaskType } from './App';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport { Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { Button } from '@material-ui/core';\r\n\r\ntype PropsType = {\r\n  id: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  addTask: (title: string, todoListID: string) => void\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n  changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n  removeTodoList: (todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n  changeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: PropsType) {\r\n  const tasks = props.tasks.map(task => {\r\n\r\n    const removeTask = () =>\r\n      props.removeTask(task.id, props.id)\r\n\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) =>\r\n      props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n\r\n    const changeTaskTitle = (newValue: string) =>\r\n      props.changeTaskTitle(task.id, newValue, props.id)\r\n\r\n    return (\r\n      <div key={task.id} className={task.isDone ? 'is-done' : ''}>\r\n        <Checkbox\r\n          onChange={changeTaskStatus}\r\n          color=\"primary\"\r\n          checked={task.isDone} />\r\n        <EditableSpan changeValue={changeTaskTitle} title={task.title} />\r\n        <IconButton onClick={removeTask}>\r\n          <Delete />\r\n        </IconButton>\r\n      </div>\r\n    )\r\n  })\r\n\r\n  const addTask = (title: string) => props.addTask(title, props.id)\r\n  const changeTodolistTitle = (title: string) => props.changeTodolistTitle(title, props.id)\r\n  const removeTodoList = () => props.removeTodoList(props.id)\r\n  const onAllClickHandler = () => props.changeFilter('all', props.id);\r\n  const onActiveClickHandler = () => props.changeFilter('active', props.id);\r\n  const onCompletedClickHandler = () => props.changeFilter('completed', props.id)\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan title={props.title} changeValue={changeTodolistTitle} />\r\n        <IconButton onClick={removeTodoList}>\r\n          <Delete />\r\n        </IconButton>\r\n      </h3>\r\n      <AddItemForm addItem={addTask} />\r\n      <div>\r\n        {tasks}\r\n      </div>\r\n      <div>\r\n        <Button\r\n          variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n          onClick={onAllClickHandler}\r\n          color='default'>All</Button>\r\n        <Button\r\n          variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n          onClick={onActiveClickHandler}\r\n          color='primary'>Active</Button>\r\n        <Button\r\n          variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n          onClick={onCompletedClickHandler}\r\n          color='secondary'>Completed</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport { v1 } from 'uuid';\r\nimport AddItemForm from './AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n  const todoListID1 = v1()\r\n  const todoListID2 = v1()\r\n\r\n  const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n    { id: todoListID1, title: 'What to learn', filter: 'all' },\r\n    { id: todoListID2, title: 'What to buy', filter: 'all' }\r\n  ])\r\n\r\n  const [tasks, setTasks] = useState<TaskStateType>({\r\n    [todoListID1]: [\r\n      { id: v1(), title: 'React', isDone: false },\r\n      { id: v1(), title: 'HTML', isDone: true },\r\n      { id: v1(), title: 'CSS', isDone: true },\r\n      { id: v1(), title: 'Rest API', isDone: false },\r\n      { id: v1(), title: 'Graph QL', isDone: true },\r\n    ],\r\n    [todoListID2]: [\r\n      { id: v1(), title: 'Хлеб', isDone: false },\r\n      { id: v1(), title: 'Молоко', isDone: true },\r\n      { id: v1(), title: 'Яйца', isDone: true },\r\n      { id: v1(), title: 'Мясо', isDone: false },\r\n      { id: v1(), title: 'Вкусняшки', isDone: true },\r\n    ]\r\n  })\r\n\r\n  // CRUD\r\n  // -Create\r\n  // -Update\r\n  // -Read\r\n  // -Delete\r\n\r\n  function removeTask(taskID: string, todoListID: string) {\r\n    const todoListTasks = tasks[todoListID]\r\n    tasks[todoListID] = todoListTasks.filter(task => task.id !== taskID)\r\n    setTasks({ ...tasks })\r\n  }\r\n\r\n  function addTask(title: string, todoListID: string) {\r\n    const newTask: TaskType = { id: v1(), title: title, isDone: false }\r\n    const todoListTasks = tasks[todoListID]\r\n    tasks[todoListID] = [newTask, ...todoListTasks]\r\n    setTasks({ ...tasks })\r\n  }\r\n\r\n  function changeFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n    const todoList = todoLists.find(tl => tl.id === todoListID)\r\n    if (todoList) {\r\n      todoList.filter = newFilterValue\r\n      setTodoLists([...todoLists])\r\n    }\r\n  }\r\n\r\n  function changeTodolistTitle(title: string, todoListID: string) {\r\n    const todoList = todoLists.find(tl => tl.id === todoListID)\r\n    if (todoList) {\r\n      todoList.title = title\r\n      setTodoLists([...todoLists])\r\n    }\r\n  }\r\n\r\n  function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n    const todoListTasks = tasks[todoListID]\r\n    const task: TaskType | undefined = todoListTasks.find(task => task.id === taskID)\r\n    if (task) {\r\n      task.isDone = isDone\r\n      setTasks({ ...tasks })\r\n    }\r\n  }\r\n\r\n  function changeTaskTitle(taskID: string, title: string, todoListID: string) {\r\n    const todoListTasks = tasks[todoListID]\r\n    const task: TaskType | undefined = todoListTasks.find(task => task.id === taskID)\r\n    if (task) {\r\n      task.title = title\r\n      setTasks({ ...tasks })\r\n    }\r\n  }\r\n\r\n  function removeTodoList(todoListID: string) {\r\n    const filteredTodoLists = todoLists.filter(tl => tl.id !== todoListID)\r\n    delete tasks[todoListID]\r\n    setTodoLists(filteredTodoLists)\r\n    setTasks({ ...tasks })\r\n  }\r\n\r\n  function addTodolistItem(title: string) {\r\n    const newTodoListID = v1()\r\n    const newTodoList: TodoListType = {\r\n      id: newTodoListID,\r\n      title: title,\r\n      filter: 'all'\r\n    }\r\n    setTodoLists([...todoLists, newTodoList])\r\n    setTasks({ ...tasks, [newTodoListID]: [] })\r\n  }\r\n\r\n  // setTasks(tasks.map(task => {\r\n  //   if (task.id === taskID) {\r\n  //     return {...task, isDone: isDone}\r\n  //   }\r\n  //   return task\r\n  // }))\r\n\r\n  // function taskFilter () {\r\n  //   let tasksForTodoList = tasks\r\n  //   if (filter === 'active') {\r\n  //     tasksForTodoList = tasks.filter(task => task.isDone === false)\r\n  //   }\r\n  //   if (filter === 'completed') {\r\n  //     tasksForTodoList = tasks.filter(task => task.isDone === true)\r\n  //   }\r\n  //   return tasksForTodoList\r\n  // }\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n                    </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Container fixed>\r\n        <Grid container style={{ padding: '20px' }}>\r\n          <AddItemForm addItem={addTodolistItem} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          {\r\n            todoLists.map(tl => {\r\n              let tasksForTodoList = tasks[tl.id]\r\n              if (tl.filter === 'active') {\r\n                tasksForTodoList = tasks[tl.id].filter(task => task.isDone === false)\r\n              }\r\n              if (tl.filter === 'completed') {\r\n                tasksForTodoList = tasks[tl.id].filter(task => task.isDone === true)\r\n              }\r\n              return (\r\n                <Grid item>\r\n                  <Paper style={{ padding: '10px' }}>\r\n                    <TodoList\r\n                      key={tl.id}\r\n                      id={tl.id}\r\n                      title={tl.title}\r\n                      tasks={tasksForTodoList}\r\n                      filter={tl.filter}\r\n                      addTask={addTask}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      changeTaskStatus={changeTaskStatus}\r\n                      removeTodoList={removeTodoList}\r\n                      changeTaskTitle={changeTaskTitle}\r\n                      changeTodolistTitle={changeTodolistTitle} />\r\n                  </Paper>\r\n                </Grid>\r\n              )\r\n            }\r\n            )\r\n          }\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}