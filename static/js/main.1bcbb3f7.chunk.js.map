{"version":3,"sources":["TodoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TodoList","props","useState","title","setTitle","error","setError","tasks","map","task","key","id","className","isDone","onChange","e","changeTaskStatus","currentTarget","checked","type","onClick","removeTask","addTask","trimmedTitle","trim","removeTodoList","value","onKeyDown","filter","changeFilter","App","todoListID1","v1","todoListID2","todoLists","setTodoLists","setTasks","taskID","todoListID","todoListTasks","newTask","newFilterValue","todoList","find","tl","filteredTodoLists","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1bcbb3f7.chunk.js","sourcesContent":["import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\nimport { FilterValuesType, TaskType } from './App';\r\n\r\ntype PropsType = {\r\n  id: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  addTask: (title: string, todoListID: string) => void\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n  changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n  removeTodoList: (todoListID: string) => void\r\n}\r\n\r\nfunction TodoList(props: PropsType) {\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<string | null>('')\r\n\r\n  const tasks = props.tasks.map(task => {\r\n    \r\n    const removeTask = () => props.removeTask(task.id, props.id)\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => \r\n    props.changeTaskStatus(task.id, e.currentTarget.checked, props.id)\r\n\r\n    return (\r\n      <li key={task.id} className={task.isDone ? 'is-done' : ''}>\r\n        <input onChange={changeTaskStatus} type=\"checkbox\" checked={task.isDone} />\r\n        <span>{task.title}</span>\r\n        <button onClick={removeTask}>X</button>\r\n      </li>\r\n    )\r\n  })\r\n\r\n  const addTask = () => {\r\n    const trimmedTitle = title.trim()\r\n    if (trimmedTitle !== '') {\r\n      props.addTask(trimmedTitle, props.id)\r\n    } else {\r\n      setError('Title is required!')\r\n    }\r\n    setTitle('')\r\n  }\r\n\r\n  const onKeyDownAddTask = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    setError(null)\r\n    if (e.key === 'Enter') {\r\n      addTask()\r\n    } else if (e.key === 'Escape') {\r\n      setTitle('')\r\n    }\r\n  }\r\n  const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setError('')\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n  const onAllClickHandler = () => props.changeFilter('all', props.id);\r\n  const onActiveClickHandler = () => props.changeFilter('active', props.id);\r\n  const onCompletedClickHandler = () => props.changeFilter('completed', props.id)\r\n\r\n  return (\r\n    <div>\r\n      <h3>{props.title}<button onClick={() => props.removeTodoList(props.id)}>X</button></h3>\r\n      <div>\r\n        <input\r\n          value={title}\r\n          onChange={onTitleChangeHandler}\r\n          onKeyDown={onKeyDownAddTask}\r\n          className={error ? 'error' : ''} />\r\n        <button onClick={addTask}>+</button>\r\n        {error && <div className={'error-message'}>{error}</div>}\r\n      </div>\r\n      <ul>\r\n        {tasks}\r\n      </ul>\r\n      <div>\r\n        <button\r\n          className={props.filter === 'all' ? 'active-filter' : ''}\r\n          onClick={onAllClickHandler}>All\r\n          </button>\r\n        <button\r\n          className={props.filter === 'active' ? 'active-filter' : ''}\r\n          onClick={onActiveClickHandler}>Active\r\n          </button>\r\n        <button\r\n          className={props.filter === 'completed' ? 'active-filter' : ''}\r\n          onClick={onCompletedClickHandler}>Completed\r\n          </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport TodoList from './TodoList';\r\nimport { v1 } from 'uuid';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\ntype TodoListType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n  const todoListID1 = v1()\r\n  const todoListID2 = v1()\r\n\r\n  const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n    { id: todoListID1, title: 'What to learn', filter: 'all' },\r\n    { id: todoListID2, title: 'What to buy', filter: 'all' }\r\n  ])\r\n\r\n  const [tasks, setTasks] = useState<TaskStateType>({\r\n    [todoListID1]: [\r\n      { id: v1(), title: 'React', isDone: false },\r\n      { id: v1(), title: 'HTML', isDone: true },\r\n      { id: v1(), title: 'CSS', isDone: true },\r\n      { id: v1(), title: 'Rest API', isDone: false },\r\n      { id: v1(), title: 'Graph QL', isDone: true },\r\n    ],\r\n    [todoListID2]: [\r\n      { id: v1(), title: 'Хлеб', isDone: false },\r\n      { id: v1(), title: 'Молоко', isDone: true },\r\n      { id: v1(), title: 'Яйца', isDone: true },\r\n      { id: v1(), title: 'Мясо', isDone: false },\r\n      { id: v1(), title: 'Вкусняшки', isDone: true },\r\n    ]\r\n  })\r\n\r\n  // CRUD\r\n  // -Create\r\n  // -Update\r\n  // -Read\r\n  // -Delete\r\n\r\n  function removeTask(taskID: string, todoListID: string) {\r\n    const todoListTasks = tasks[todoListID]\r\n    tasks[todoListID] = todoListTasks.filter(task => task.id !== taskID)\r\n    setTasks({ ...tasks })\r\n  }\r\n\r\n  function addTask(title: string, todoListID: string) {\r\n    const newTask: TaskType = { id: v1(), title: title, isDone: false }\r\n    const todoListTasks = tasks[todoListID]\r\n    tasks[todoListID] = [newTask, ...todoListTasks]\r\n    setTasks({ ...tasks })\r\n  }\r\n\r\n  function changeFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n    const todoList = todoLists.find(tl => tl.id === todoListID)\r\n    if (todoList) {\r\n      todoList.filter = newFilterValue\r\n      setTodoLists([...todoLists])\r\n    }\r\n  }\r\n\r\n  function changeTaskStatus(taskID: string, isDone: boolean, todoListID: string) {\r\n    const todoListTasks = tasks[todoListID]\r\n    const task: TaskType | undefined = todoListTasks.find(task => task.id === taskID)\r\n    if (task) {\r\n      task.isDone = isDone\r\n      setTasks({ ...tasks })\r\n    }\r\n  }\r\n\r\n  function removeTodoList(todoListID: string) {\r\n    const filteredTodoLists = todoLists.filter(tl => tl.id !== todoListID)\r\n    delete tasks[todoListID]\r\n    setTodoLists(filteredTodoLists)\r\n    setTasks({ ...tasks })\r\n  }\r\n\r\n  // setTasks(tasks.map(task => {\r\n  //   if (task.id === taskID) {\r\n  //     return {...task, isDone: isDone}\r\n  //   }\r\n  //   return task\r\n  // }))\r\n\r\n  // function taskFilter () {\r\n  //   let tasksForTodoList = tasks\r\n  //   if (filter === 'active') {\r\n  //     tasksForTodoList = tasks.filter(task => task.isDone === false)\r\n  //   }\r\n  //   if (filter === 'completed') {\r\n  //     tasksForTodoList = tasks.filter(task => task.isDone === true)\r\n  //   }\r\n  //   return tasksForTodoList\r\n  // }\r\n  return (\r\n    <div className=\"App\">\r\n      {\r\n        todoLists.map(tl => {\r\n          let tasksForTodoList = tasks[tl.id]\r\n          if (tl.filter === 'active') {\r\n            tasksForTodoList = tasks[tl.id].filter(task => task.isDone === false)\r\n          }\r\n          if (tl.filter === 'completed') {\r\n            tasksForTodoList = tasks[tl.id].filter(task => task.isDone === true)\r\n          }\r\n          return (\r\n            <TodoList\r\n              key={tl.id}\r\n              id={tl.id}\r\n              title={tl.title}\r\n              tasks={tasksForTodoList}\r\n              filter={tl.filter}\r\n              addTask={addTask}\r\n              removeTask={removeTask}\r\n              changeFilter={changeFilter}\r\n              changeTaskStatus={changeTaskStatus}\r\n              removeTodoList={removeTodoList} />\r\n          )\r\n        }\r\n        )\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}