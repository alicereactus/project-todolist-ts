{"version":3,"sources":["serviceWorker.ts","state/todolists-reducer.ts","state/task-reducer.ts","AddItemForm.tsx","EditableSpan.tsx","Task.tsx","TodoList.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","AddItemForm","React","memo","props","useState","title","setTitle","error","setError","addItem","trimmedTitle","trim","TextField","variant","value","onChange","e","currentTarget","onKeyDown","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","console","log","editMode","setEditMode","onBlur","changeValue","autoFocus","onDoubleClick","Task","task","onChangeHandler","onTitleChangeHandler","onClickHandler","id","className","isDone","Checkbox","checked","Delete","Todolist","tasks","filter","_addTask","removeTask","changeFilter","_changeTaskStatus","removeTodoList","changeTaskTitle","_changeTodolistTitle","addTask","useCallback","removeTodolist","changeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","taskID","map","t","Button","AppWithRedux","todoLists","useSelector","state","todolists","dispatch","useDispatch","todoListID","action","type","removeTaskAC","addTaskAC","newTodoListFilter","changeTodoListFilterActionTypeAC","newTodoListTitle","changeTodoListTitleAC","changeTaskStatus","changeTaskStatusAC","changeTaskTitleAC","removeTodoListAC","addTodolistItem","v1","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","style","padding","spacing","tl","item","Paper","TodoList","rootReducer","combineReducers","stateCopy","filteredTasks","newTask","newTasks","newTodoList","todoList","find","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d6af2200.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { v1 } from \"uuid\";\r\n\r\nimport { FilterValuesType, TodoListType } from \"../AppWithRedux\";\r\n\r\nexport type ActionType =\r\n  RemoveTodoListActionType\r\n  | AddTodoListActionType\r\n  | ChangeTodoListFilterActionType\r\n  | ChangeTodoListTitleActionType\r\n\r\nexport type RemoveTodoListActionType = {\r\n  type: 'REMOVE-TODOLIST'\r\n  id: string\r\n}\r\n\r\nexport type AddTodoListActionType = {\r\n  type: 'ADD-TODOLIST'\r\n  title: string\r\n  todoListID: string\r\n}\r\n\r\nexport type ChangeTodoListTitleActionType = {\r\n  type: 'CHANGE-TODOLIST-TITLE'\r\n  id: string\r\n  title: string\r\n}\r\n\r\nexport type ChangeTodoListFilterActionType = {\r\n  type: 'CHANGE-TODOLIST-FILTER'\r\n  id: string\r\n  filter: FilterValuesType\r\n}\r\n\r\nlet initialState: Array<TodoListType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodoListType> = initialState, action: ActionType) => {\r\n  switch (action.type) {\r\n    case 'REMOVE-TODOLIST':\r\n      return state.filter(tl => tl.id !== action.id);\r\n    case 'ADD-TODOLIST':\r\n      const newTodoList: TodoListType = {\r\n        id: action.todoListID,\r\n        title: action.title,\r\n        filter: 'all'\r\n      }\r\n      return [...state, newTodoList]\r\n    case 'CHANGE-TODOLIST-TITLE': {\r\n      const todoList = state.find(tl => tl.id === action.id)\r\n      if (todoList) {\r\n        todoList.title = action.title\r\n      }\r\n      return [...state]\r\n    }\r\n    case 'CHANGE-TODOLIST-FILTER': {\r\n      const todoList = state.find(tl => tl.id === action.id)\r\n      if (todoList) {\r\n        todoList.filter = action.filter\r\n      }\r\n      return [...state]\r\n    }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const removeTodoListAC = (todoListID: string): RemoveTodoListActionType => ({\r\n  type: 'REMOVE-TODOLIST',\r\n  id: todoListID\r\n})\r\n\r\nexport const addTodoListAC = (newTodoListTitle: string): AddTodoListActionType => ({\r\n  type: 'ADD-TODOLIST',\r\n  title: newTodoListTitle,\r\n  todoListID: v1()\r\n})\r\n\r\nexport const changeTodoListTitleAC = (todoListID: string, newTodoListTitle: string): ChangeTodoListTitleActionType => ({\r\n  type: 'CHANGE-TODOLIST-TITLE',\r\n  id: todoListID,\r\n  title: newTodoListTitle\r\n})\r\n\r\nexport const changeTodoListFilterActionTypeAC = (newTodoListFilter: FilterValuesType, todoListID: string): ChangeTodoListFilterActionType => ({\r\n  type: 'CHANGE-TODOLIST-FILTER',\r\n  id: todoListID,\r\n  filter: newTodoListFilter\r\n})","import { v1 } from \"uuid\";\r\n\r\nimport { TaskStateType } from \"../AppWithRedux\";\r\nimport { AddTodoListActionType, RemoveTodoListActionType } from \"./todolists-reducer\";\r\n\r\nexport type ActionType =\r\n    RemoveTaskActionType\r\n    | AddTaskActionType\r\n    | ChangeTaskStatusActionType\r\n    | ChangeTaskTitleActionType\r\n    | RemoveTodoListActionType\r\n    | AddTodoListActionType\r\n\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskID: string\r\n    todoListID: string\r\n}\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todoListID: string\r\n}\r\n\r\nexport type ChangeTaskStatusActionType = {\r\n    type: 'CHANGE-TASK-STATUS'\r\n    todoListID: string\r\n    taskID: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type ChangeTaskTitleActionType = {\r\n    type: 'CHANGE-TASK-TITLE'\r\n    todoListID: string\r\n    taskID: string\r\n    title: string\r\n}\r\n\r\nlet initialState: TaskStateType = {}\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = { ...state };\r\n            const tasks = stateCopy[action.todoListID];\r\n            const filteredTasks = tasks.filter(t => t.id !== action.taskID)\r\n            stateCopy[action.todoListID] = filteredTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = { ...state };\r\n            const tasks = stateCopy[action.todoListID];\r\n            const newTask = { id: v1(), title: action.title, isDone: false };\r\n            const newTasks = [newTask, ...tasks];\r\n            stateCopy[action.todoListID] = newTasks;\r\n            return stateCopy;\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            // let tasks = state[action.todoListID]\r\n            // // найдём нужную таску:\r\n            // let task = tasks && tasks.find(t => t.id === action.taskID);\r\n            // //изменим таску, если она нашлась\r\n            // if (task) {\r\n            //     task.isDone = action.isDone;\r\n            // }\r\n            return ({\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].map(task => task.id === action.taskID ? { ...task, isDone: action.isDone } : task)\r\n            });\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            // let tasks = state[action.todoListID];\r\n            // // найдём нужную таску:\r\n            // let task = tasks.find(t => t.id === action.taskID)\r\n            // //изменим таску, если она нашлась\r\n            // if (task) {\r\n            //     task.title = action.title;\r\n            // }\r\n            return ({\r\n                ...state,\r\n                [action.todoListID]: state[action.todoListID].map(task => task.id === action.taskID ? { ...task, title: action.title } : task)\r\n            });;\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = { ...state };\r\n            delete stateCopy[action.id]\r\n            return stateCopy;\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            const stateCopy = { ...state };\r\n\r\n            stateCopy[action.todoListID] = [];\r\n\r\n            return stateCopy;\r\n        }\r\n        default: return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskID: string, todoListID: string): RemoveTaskActionType => {\r\n    return { type: 'REMOVE-TASK', taskID, todoListID }\r\n}\r\n\r\nexport const addTaskAC = (title: string, todoListID: string): AddTaskActionType => {\r\n    return { type: 'ADD-TASK', title, todoListID }\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskID: string, todoListID: string, isDone: boolean): ChangeTaskStatusActionType => {\r\n    return { type: 'CHANGE-TASK-STATUS', todoListID, taskID, isDone }\r\n}\r\n\r\nexport const changeTaskTitleAC = (todoListID: string, taskID: string, title: string): ChangeTaskTitleActionType => {\r\n    return { type: 'CHANGE-TASK-TITLE', todoListID, taskID, title }\r\n}","import React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\n\r\nimport { IconButton, TextField } from '@material-ui/core';\r\nimport { AddBox } from '@material-ui/icons';\r\n\r\ntype AddItemFormType = {\r\n  addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm = React.memo((props: AddItemFormType) => {\r\n  // console.log('AddItemForm called ')\r\n  const [title, setTitle] = useState<string>('')\r\n  const [error, setError] = useState<string | null>('')\r\n\r\n  const onTitleChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setError('')\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  const onKeyDownAddItem = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) {\r\n      setError(null)\r\n    }\r\n    if (e.key === 'Enter') {\r\n      addItem()\r\n    } else if (e.key === 'Escape') {\r\n      setTitle('')\r\n    }\r\n  }\r\n\r\n  const addItem = () => {\r\n    const trimmedTitle = title.trim()\r\n    if (trimmedTitle !== '') {\r\n      props.addItem(trimmedTitle)\r\n    } else {\r\n      setError('Title is required!')\r\n    }\r\n    setTitle('')\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        variant='outlined'\r\n        error={!!error}\r\n        value={title}\r\n        onChange={onTitleChangeHandler}\r\n        onKeyDown={onKeyDownAddItem}\r\n        label='Enter title'\r\n        helperText={error}\r\n      />\r\n      <IconButton\r\n        color='primary'\r\n        onClick={addItem}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n})\r\n\r\nexport default AddItemForm","import React, { useState, ChangeEvent } from 'react';\r\n\r\nimport { TextField } from '@material-ui/core';\r\n\r\ntype EditableSpanType = {\r\n  title: string\r\n  changeValue: (newValue: string) => void\r\n}\r\n\r\nfunction EditableSpan(props: EditableSpanType) {\r\n  console.log('EditableSpan called')\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [title, setTitle] = useState<string>(props.title)\r\n\r\n  const activatedEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deActivatedEditMode = () => {\r\n    setEditMode(false)\r\n    props.changeValue(title)\r\n  }\r\n\r\n  const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n\r\n  return (editMode\r\n    ?\r\n    <TextField\r\n      variant='outlined'\r\n      value={title}\r\n      onBlur={deActivatedEditMode}\r\n      onChange={onChangeTitle}\r\n      autoFocus={true}\r\n    />\r\n    : <span\r\n      onDoubleClick={activatedEditMode}>{props.title}</span>\r\n  )\r\n}\r\n\r\nexport default EditableSpan","import React, { ChangeEvent } from 'react'\r\n\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport { Delete } from '@material-ui/icons'\r\n\r\nimport EditableSpan from './EditableSpan'\r\nimport { TaskType } from './AppWithRedux'\r\n\r\ntype TaskPropsType = {\r\n    // taskID\r\n    // todolistID\r\n    task: TaskType\r\n    onChangeHandler: (taskID: string, isDone: boolean) => void\r\n    onTitleChangeHandler: (taskID: string, title: string) => void\r\n    onClickHandler: (taskID: string) => void\r\n}\r\n\r\nexport const Task: React.FC<TaskPropsType> = React.memo(({task, onChangeHandler, onTitleChangeHandler, onClickHandler}) => {\r\n\r\n    return <div key={task.id} className={task.isDone ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n            checked={task.isDone}\r\n            color=\"primary\"\r\n            onChange={(e: ChangeEvent<HTMLInputElement>) => onChangeHandler(task.id, e.currentTarget.checked)}\r\n        />\r\n\r\n        <EditableSpan title={task.title} changeValue={() => onTitleChangeHandler(task.id, task.title)} />\r\n        <IconButton onClick={() => onClickHandler(task.id)}>\r\n            <Delete />\r\n        </IconButton>\r\n    </div>\r\n})","import React, { useCallback } from 'react';\r\n// import { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { Button } from '@material-ui/core';\r\n\r\n// import { AppRootStateType } from './state/store';\r\n\r\nimport { FilterValuesType, TaskType } from './AppWithRedux';\r\nimport AddItemForm from './AddItemForm';\r\nimport EditableSpan from './EditableSpan';\r\nimport { Task } from './Task';\r\n\r\ntype PropsType = {\r\n  id: string\r\n  title: string\r\n  tasks: Array<TaskType>\r\n  filter: FilterValuesType\r\n  _addTask: (title: string, todoListID: string) => void\r\n  removeTask: (taskID: string, todoListID: string) => void\r\n  changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\r\n  _changeTaskStatus: (taskID: string, isDone: boolean, todoListID: string) => void\r\n  removeTodoList: (todoListID: string) => void\r\n  changeTaskTitle: (taskID: string, title: string, todoListID: string) => void\r\n  _changeTodolistTitle: (title: string, todoListID: string) => void\r\n}\r\n\r\nconst Todolist: React.FC<PropsType> = React.memo(({\r\n  id, title, tasks, filter,\r\n  _addTask, removeTask, changeFilter, _changeTaskStatus,\r\n  removeTodoList, changeTaskTitle, _changeTodolistTitle }) => {\r\n  // let tt = useSelector<AppRootStateType, TodoListType>(state => state.todolists.filter(t => t.id === id)[0])\r\n  // let ss = useSelector<AppRootStateType, Array<TaskType>>(state => state.tasks[id])\r\n  console.log('Todolist called')\r\n\r\n  const addTask = useCallback((title: string) => {\r\n    _addTask(title, id)\r\n  }, [_addTask, id])\r\n\r\n  const removeTodolist = useCallback(() => {\r\n    removeTodoList(id);\r\n  }, [removeTodoList, id])\r\n  \r\n  const changeTodolistTitle = useCallback((title: string) => {\r\n    _changeTodolistTitle(id, title);\r\n  }, [_changeTodolistTitle, id])\r\n\r\n  const onAllClickHandler = useCallback(() => changeFilter(\"all\", id), [changeFilter, id]);\r\n\r\n  const onActiveClickHandler = useCallback(() => changeFilter(\"active\", id), [changeFilter, id]);\r\n\r\n  const onCompletedClickHandler = useCallback(() => changeFilter(\"completed\", id), [changeFilter, id]);\r\n\r\n  let tasksForTodolist = tasks;\r\n\r\n  if (filter === 'active') {\r\n    tasksForTodolist = tasks.filter(task => task.isDone === false)\r\n  }\r\n  if (filter === 'completed') {\r\n    tasksForTodolist = tasks.filter(task => task.isDone === true)\r\n  }\r\n\r\n  const onClickHandler = useCallback((taskID: string) => removeTask(taskID, id), [removeTask, id])\r\n\r\n  const onChangeHandler = useCallback((taskID: string, isDone: boolean) => {\r\n    _changeTaskStatus(taskID, isDone, id);\r\n  }, [_changeTaskStatus, id])\r\n\r\n  const onTitleChangeHandler = useCallback((taskID: string, title: string) => {\r\n    changeTaskTitle(taskID, title, id);\r\n  }, [changeTaskTitle, id])\r\n\r\n  return <div>\r\n    <h3> <EditableSpan title={title} changeValue={changeTodolistTitle} />\r\n      <IconButton onClick={removeTodolist}>\r\n        <Delete />\r\n      </IconButton>\r\n    </h3>\r\n    <AddItemForm addItem={addTask} />\r\n    <div>\r\n      {\r\n        tasksForTodolist.map(t => {\r\n          return <Task\r\n            key={t.id}\r\n            task={t}\r\n            onChangeHandler={onChangeHandler}\r\n            onTitleChangeHandler={onTitleChangeHandler}\r\n            onClickHandler={onClickHandler} />\r\n        })\r\n      }\r\n    </div>\r\n    <div>\r\n      <Button variant={filter === 'all' ? 'outlined' : 'text'}\r\n        onClick={onAllClickHandler}\r\n        color={'default'}\r\n      >All\r\n            </Button>\r\n      <Button variant={filter === 'active' ? 'outlined' : 'text'}\r\n        onClick={onActiveClickHandler}\r\n        color={'primary'}>Active\r\n            </Button>\r\n      <Button variant={filter === 'completed' ? 'outlined' : 'text'}\r\n        onClick={onCompletedClickHandler}\r\n        color={'secondary'}>Completed\r\n            </Button>\r\n    </div>\r\n  </div>\r\n})\r\n\r\nexport default Todolist;","import React, { useCallback } from 'react';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\n\r\nimport { addTodoListAC, changeTodoListFilterActionTypeAC, changeTodoListTitleAC, removeTodoListAC } from './state/todolists-reducer';\r\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from './state/task-reducer';\r\nimport { AppRootStateType } from './state/store';\r\n\r\nimport TodoList from './TodoList';\r\nimport AddItemForm from './AddItemForm';\r\n\r\nimport './App.css';\r\n\r\nexport type TaskType = {\r\n  id: string\r\n  title: string\r\n  isDone: boolean\r\n}\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodoListType = {\r\n  id: string\r\n  title: string\r\n  filter: FilterValuesType\r\n}\r\n\r\nexport type TaskStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n  const todoLists = useSelector<AppRootStateType, Array<TodoListType>>(state => state.todolists)\r\n  const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  // CRUD\r\n  // -Create\r\n  // -Update\r\n  // -Read\r\n  // -Delete\r\n\r\n  const removeTask = useCallback((taskID: string, todoListID: string) => {\r\n    const action = removeTaskAC(taskID, todoListID)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const addTask = useCallback((title: string, todoListID: string) => {\r\n    const action = addTaskAC(title, todoListID)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const changeFilter = useCallback((filter: FilterValuesType, todoListID: string) => {\r\n    const action = changeTodoListFilterActionTypeAC(filter, todoListID)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const changeTodolistTitle = useCallback((title: string, todoListID: string) => {\r\n    const action = changeTodoListTitleAC(todoListID, title)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const changeTaskStatus = useCallback((taskID: string, isDone: boolean, todoListID: string) => {\r\n    const action = changeTaskStatusAC(taskID, todoListID, isDone)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const changeTaskTitle = useCallback((taskID: string, title: string, todoListID: string) => {\r\n    const action = changeTaskTitleAC(taskID, title, todoListID)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const removeTodoList = useCallback((todoListID: string) => {\r\n    const action = removeTodoListAC(todoListID)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const addTodolistItem = useCallback((title: string) => {\r\n    const action = addTodoListAC(title)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n            <Menu />\r\n          </IconButton>\r\n          <Typography variant=\"h6\">\r\n            News\r\n                    </Typography>\r\n          <Button color=\"inherit\">Login</Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <Container fixed>\r\n        <Grid container style={{ padding: '20px' }}>\r\n          <AddItemForm addItem={addTodolistItem} />\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n          {\r\n            todoLists.map(tl => {\r\n              \r\n              let allTodolistTasks = tasks[tl.id];\r\n              let tasksForTodolist = allTodolistTasks;\r\n\r\n              return (\r\n                <Grid item key={tl.id} >\r\n                  <Paper style={{ padding: '10px' }}>\r\n                    <TodoList\r\n                      id={tl.id}\r\n                      title={tl.title}\r\n                      tasks={tasksForTodolist}\r\n                      filter={tl.filter}\r\n                      _addTask={addTask}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      _changeTaskStatus={changeTaskStatus}\r\n                      removeTodoList={removeTodoList}\r\n                      changeTaskTitle={changeTaskTitle}\r\n                      _changeTodolistTitle={changeTodolistTitle} />\r\n                  </Paper>\r\n                </Grid>\r\n              )\r\n            }\r\n            )\r\n          }\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppWithRedux;","import {tasksReducer} from './task-reducer';\r\nimport {todolistsReducer} from './todolists-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n   tasks: tasksReducer,\r\n   todolists: todolistsReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer);\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import App from './App';\r\n// import AppWithReducers from './App';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport {store} from './state/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <AppWithRedux/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}